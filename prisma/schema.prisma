// ==========================
// Generator & Datasource
// ==========================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// Enums
// ==========================
enum UserRole {
  SEEKER
  EMPLOYER
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  LOGIN_2FA
}

enum ProviderType {
  GOOGLE
  GITHUB
}

enum CompanySize {
  SIZE_1_10
  SIZE_11_50
  SIZE_51_200
  SIZE_201_500
  SIZE_500_PLUS
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EmployerOnboardingStep {
  EMAIL_VERIFIED // Employer has verified email
  SETUP_STARTED // Employer started filling company setup
  SETUP_COMPLETE // Company setup completed
  KYC_PENDING // KYC uploaded, pending verification
  VERIFIED // Fully verified
}

// ==========================
// Job-Specific Enums
// ==========================
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
}

enum SalaryType {
  ANNUAL
  MONTHLY
  HOURLY
}

enum Currency {
  INR
  USD
  EUR
  GBP
}

enum ApplyType {
  DIRECT
  EXTERNAL
  PRE_SCREENING
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}

enum JobStatus {
  DRAFT
  PENDING
  ACTIVE
  EXPIRED
  ARCHIVED
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  REJECTED
  HIRED
  WITHDRAWN
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SHORT_ANSWER
}

enum JobApplicationSource {
  DIRECT
  EXTERNAL
  PRE_SCREENING
}

enum JobPriority {
  REGULAR
  FEATURED
  URGENT
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// ==========================
// Core Models
// ==========================
model User {
  id              BigInt        @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey       String        @unique @default(uuid())
  email           String        @unique
  password        String?
  fullName        String
  phone           String?       @unique
  role            UserRole
  isVerified      Boolean       @default(false)
  emailVerifiedAt DateTime?
  status          AccountStatus @default(PENDING)
  lastLogin       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  refreshToken    String?

  jobSeeker JobSeeker?
  employer  Employer?
  providers UserProvider[]
  tokens    Token[]
}

// ==========================
// Role Specific Profiles
// ==========================
model JobSeeker {
  id        BigInt @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey String @unique @default(uuid())
  userId    BigInt @unique
  user      User   @relation(fields: [userId], references: [id])

  bio             String?
  location        String?
  profileImage    String?
  github          String?
  linkedin        String?
  personalWebsite String?

  skills         JobSeekerSkill[]
  resumes        JobSeekerResume[]
  experiences    Experience[]
  education      Education[]
  certifications Certification[]
  JobApplication JobApplication[]
}

model Employer {
  id        BigInt @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey String @unique @default(uuid())
  userId    BigInt @unique
  user      User   @relation(fields: [userId], references: [id])

  companyName    String
  slug           String  @unique
  companyLogo    String?
  bannerUrl      String?
  companyWebsite String?

  industry    String
  companySize CompanySize
  foundedYear Int?
  location    String

  about   String
  mission String?
  vision  String?
  values  String[]

  linkedIn   String?
  twitter    String?
  facebook   String?
  instagram  String?
  youtube    String?
  glassdoor  String?
  crunchbase String?

  contactName        String
  contactEmail       String
  contactPhone       String?
  contactDesignation String?

  perksAndBenefits  String[]
  hiringProcess     String?
  remoteFriendly    Boolean?
  teamSizeInTech    Int?
  cultureHighlights String[]

  isVerified    Boolean @default(false)
  isActive      Boolean @default(true)
  flaggedReason String?

  // Onboarding tracking
  onboardingStep  EmployerOnboardingStep? @default(EMAIL_VERIFIED)
  lastVisitedStep EmployerOnboardingStep?

  kycs EmployerKYC[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Job       Job[]
}

// ==========================
// Employer KYC
// ==========================
model EmployerKYC {
  id         BigInt   @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey  String   @unique @default(uuid())
  employerId BigInt
  employer   Employer @relation(fields: [employerId], references: [id])

  panCardUrl           String?
  incorporationCertUrl String?
  gstCertUrl           String?
  otherDocs            String[]

  status          KYCStatus @default(PENDING)
  reviewedBy      BigInt?
  reviewedAt      DateTime?
  remarks         String?
  rejectionReason String?

  employerAcknowledged Boolean @default(false)

  attemptNumber Int           @default(1)
  previousKycId BigInt?
  previousKyc   EmployerKYC?  @relation("PreviousKYC", fields: [previousKycId], references: [id])
  nextKycs      EmployerKYC[] @relation("PreviousKYC")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==========================
// Skills (Many-to-Many)
// ==========================
model Skill {
  id      BigInt           @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  name    String           @unique
  seekers JobSeekerSkill[]
}

model JobSeekerSkill {
  id               BigInt            @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  jobSeekerId      BigInt
  skillId          BigInt
  proficiencyLevel ProficiencyLevel? // NEW

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
  skill     Skill     @relation(fields: [skillId], references: [id])
}

// ==========================
// Job Seeker Detailed Models
// ==========================
model JobSeekerResume {
  id          BigInt   @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey   String   @unique @default(uuid())
  jobSeekerId BigInt
  url         String
  fileName    String
  uploadedAt  DateTime @default(now())

  jobSeeker      JobSeeker        @relation(fields: [jobSeekerId], references: [id])
  JobApplication JobApplication[]
}

model Experience {
  id          BigInt    @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey   String    @unique @default(uuid())
  jobSeekerId BigInt
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

model Education {
  id          BigInt    @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey   String    @unique @default(uuid())
  jobSeekerId BigInt
  degree      String
  institution String
  startDate   DateTime
  endDate     DateTime?
  description String?

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

model Certification {
  id            BigInt    @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey     String    @unique @default(uuid())
  jobSeekerId   BigInt
  name          String
  organization  String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

// ==========================
// OAuth Providers
// ==========================
model UserProvider {
  id         BigInt       @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey  String       @unique @default(uuid())
  provider   ProviderType
  providerId String
  userId     BigInt
  user       User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

// ==========================
// Tokens (Verification, Reset, 2FA)
// ==========================
model Token {
  id        BigInt    @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey String    @unique @default(uuid())
  token     String    @unique
  type      TokenType
  userId    BigInt
  user      User      @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

// ==========================
// Job Posting Models
// ==========================
model Job {
  id                BigInt          @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey         String          @unique @default(uuid())
  slug              String          @unique
  title             String
  employerId        BigInt
  employer          Employer        @relation(fields: [employerId], references: [id])
  industry          String
  workMode          WorkMode
  employmentType    EmploymentType
  experience        ExperienceLevel
  salaryMin         Float
  salaryMax         Float
  salaryType        SalaryType
  currency          Currency
  postedAt          DateTime        @default(now())
  publishedAt       DateTime?
  closedAt          DateTime?
  validTill         DateTime
  description       String
  requirements      String[]
  responsibilities  String[]
  benefits          String[]
  educationLevel    String
  tags              String[]
  technologies      String[]
  certifications    String[]
  clearanceRequired Boolean?
  applyType         ApplyType
  applyUrl          String?
  applicationEmail  String?
  applicationLimit  Int?
  views             Int             @default(0)
  applicationsCount Int             @default(0)
  shortlistedCount  Int?
  hiredCount        Int?
  bookmarkedCount   Int?
  isFeatured        Boolean         @default(false)
  isUrgent          Boolean         @default(false)
  metaTitle         String?
  metaDescription   String?
  status            JobStatus       @default(DRAFT)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  screeningQuestions ScreeningQuestion[]
  JobCategory        JobCategory?        @relation(fields: [jobCategoryId], references: [id])
  jobCategoryId      BigInt?

  // New relation for job location
  locationId   BigInt?
  location     JobLocation?     @relation(fields: [locationId], references: [id])
  applications JobApplication[]
}

model ScreeningQuestion {
  id                   BigInt                 @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  jobId                BigInt
  job                  Job                    @relation(fields: [jobId], references: [id])
  question             String
  type                 QuestionType
  options              String[]
  required             Boolean
  sequence             Int                    @default(0) // NEW: order of questions
  JobApplicationAnswer JobApplicationAnswer[]
}

model JobCategory {
  id   BigInt @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  main String
  sub  String
  jobs Job[]
}

model JobLocation {
  id        BigInt  @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  city      String?
  state     String?
  country   String?
  latitude  Float?
  longitude Float?
  jobs      Job[]
}

model AuditLog {
  id         BigInt   @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  action     String
  userId     BigInt?
  employerId BigInt?
  jobId      BigInt?
  details    Json?
  createdAt  DateTime @default(now())
}

model JobApplication {
  id            BigInt               @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  uniqueKey     String               @unique @default(uuid())
  jobId         BigInt
  jobSeekerId   BigInt
  resumeId      BigInt?
  appliedAt     DateTime             @default(now())
  status        ApplicationStatus    @default(APPLIED)
  source        JobApplicationSource
  coverLetter   String?
  withdrawnAt   DateTime?
  priority      JobPriority          @default(REGULAR)
  notes         String? // internal employer notes
  shortlistedAt DateTime? // NEW
  hiredAt       DateTime? // NEW
  stageHistory  Json? // NEW: historical tracking

  job       Job                    @relation(fields: [jobId], references: [id])
  jobSeeker JobSeeker              @relation(fields: [jobSeekerId], references: [id])
  resume    JobSeekerResume?       @relation(fields: [resumeId], references: [id])
  answers   JobApplicationAnswer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([jobId, status])
  @@index([jobSeekerId, status])
  @@index([appliedAt])
  @@index([priority])
}

model JobApplicationAnswer {
  id            BigInt @id @default(dbgenerated("floor(random()*1000000000+1000000000)"))
  applicationId BigInt
  questionId    BigInt
  answer        Json // CHANGED from String → Json for multiple-choice answers

  application JobApplication    @relation(fields: [applicationId], references: [id])
  question    ScreeningQuestion @relation(fields: [questionId], references: [id])
}
